class Solution:
    def rob(self, nums: List[int]) -> int:
        dp = [0] * (len(nums)-1) 
        if len(nums) > 2:
            dp_two = [0] * (len(nums) - 1)
            dp[0] = nums[0]
            dp[1] = max(nums[0], nums[1])
            for i in range(2, len(nums) - 1):
                dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])
            nums_two = nums[1:]
            dp_two[0] = nums_two[0]
            dp_two[1] = max(nums_two[1], nums_two[0])
            for j in range(2, len(nums_two)):
                dp_two[j] = max(dp_two[j - 1], dp_two[j - 2] + nums_two[j])
            return max(dp[-1], dp_two[-1])
        return max(nums)

# В данном алгоритме создаём два списка, сперва тот, который хрант мксимально возможные украденные деньги из k - 1 домов без последнего, где k - количество домов, во втором хранятться максимально возможные украденные деньги из k - 1 домов без первого, где  k - количество домов, по причине того, что k-ый дом и первый считаються соседними.
# Если длина nums меньше либо равна двум, то в ответе возвратиться максимум из домов, потому что в этом случае мы только сможем обокрасть один дом, иначе ищем максимальную сумму денег из k - 1 домов без последнего и максимальную сумму денег из k - 1 домов без первого и находим из них максимум.
# Сложность алгоритма - O(n) 

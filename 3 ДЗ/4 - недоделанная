class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        answer = []
        seen = []
        if len(grid) == 0:
            return 0
        if len(grid) == 1 and len(grid[0]) == 1 and grid[0][0] == '1':
            return 1
        elif len(grid) == 1 and len(grid[0]) == 1 and grid[0][0] == '0':
            return 0
        if len(grid) == 1:
            for i in range(len(grid[0])):
                if grid[0][i] == '1' and (0, i) not in seen:
                    stack = [(0, i)]
                    seen = [(0, i)]
                    while stack:
                        x, y = stack.pop()
                        if y != len(grid[0]) - 1:
                            if grid[0][y + 1] == '1' and (0, y + 1) not in seen:
                                stack.append((0, y + 1))
                                seen.append((0, y + 1))
                    if seen not in answer:
                        answer.append(seen)
            return len(answer)
        if len(grid[0]) == 1:
            for i in range(len(grid)):
                if grid[i][0] == '1' and (i, 0) not in seen:
                    stack = [(i, 0)]
                    seen = [(i, 0)]
                    while stack:
                        x, y = stack.pop()
                        if x != len(grid) - 1:
                            if grid[x + 1][0] == '1' and (x + 1, 0) not in seen:
                                stack.append((x + 1, 0))
                                seen.append((x + 1, 0))
                    if seen not in answer:
                        answer.append(seen)
            return len(answer)

        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == '1' and (i, j) not in seen:
                    stack = [(i, j)]
                    seen = [(i, j)]
                    while stack:
                        x, y = stack.pop()
                        if x == 0 and y == 0:
                            if grid[x][y + 1] == '1' and (x, y + 1) not in seen:
                                stack.append((x, y + 1))
                                seen.append((x, y + 1))
                            if grid[x + 1][y] == '1' and (x + 1, y) not in seen:
                                stack.append((x + 1, y))
                                seen.append((x + 1, y))
                        elif x == 0:
                            if y!= len(grid[0]) - 1 and grid[x][y + 1] == '1' and (x, y + 1) not in seen:
                                stack.append((x, y + 1))
                                seen.append((x, y + 1))
                            if grid[x + 1][y] == '1' and (x + 1, y) not in seen:
                                stack.append((x + 1, y))
                                seen.append((x + 1, y))
                            if grid[x][y - 1] == '1' and (x, y - 1) not in seen:
                                stack.append((x, y - 1))
                                seen.append((x, y - 1))
                        elif y == 0:
                            if grid[x - 1][y] == '1' and (x - 1, y) not in seen:
                                stack.append((x - 1, y))
                                seen.append((x - 1, y))
                            if grid[x][y + 1] == '1' and (x, y + 1) not in seen:
                                stack.append((x, y + 1))
                                seen.append((x, y + 1))
                            if x != len(grid) - 1 and grid[x + 1][y] == '1' and (x + 1, y) not in seen:
                                stack.append((x + 1, y))
                                seen.append((x + 1, y))
                        elif x != 0 and y != 0 and x != len(grid) - 1 and y != len(grid[0]) - 1:
                            if grid[x - 1][y] == '1' and (x - 1, y) not in seen:
                                stack.append((x - 1, y))
                                seen.append((x - 1, y))
                            if grid[x][y + 1] == '1' and (x, y + 1) not in seen:
                                stack.append((x, y + 1))
                                seen.append((x, y + 1))
                            if grid[x + 1][y] == '1' and (x + 1, y) not in seen:
                                stack.append((x + 1, y))
                                seen.append((x + 1, y))
                            if grid[x][y - 1] == '1' and (x, y - 1) not in seen:
                                stack.append((x, y - 1))
                                seen.append((x, y - 1))
                        elif x == len(grid) - 1 and y == len(grid[0]) - 1:
                            if grid[x - 1][y] == '1' and (x - 1, y) not in seen:
                                stack.append((x - 1, y))
                                seen.append((x - 1, y))
                            if grid[x][y - 1] == '1' and (x, y - 1) not in seen:
                                stack.append((x, y - 1))
                                seen.append((x, y - 1))
                        elif x == len(grid) - 1:
                            if grid[x][y - 1] == '1' and (x, y - 1) not in seen:
                                stack.append((x, y - 1))
                                seen.append((x, y - 1))
                            if grid[x][y + 1] == '1' and (x, y + 1) not in seen:
                                stack.append((x, y + 1))
                                seen.append((x, y + 1))
                            if grid[x - 1][y] == '1' and (x - 1, y) not in seen:
                                stack.append((x - 1, y))
                                seen.append((x - 1, y))
                        elif y == len(grid[0]) - 1:
                            if grid[x][y - 1] == '1' and (x, y - 1) not in seen:
                                stack.append((x, y - 1))
                                seen.append((x, y - 1))
                            if grid[x - 1][y] == '1' and (x - 1, y) not in seen:
                                stack.append((x - 1, y))
                                seen.append((x - 1, y))
                            if grid[x + 1][y] == '1' and (x + 1, y) not in seen:
                                stack.append((x + 1, y))
                                seen.append((x + 1, y))
                            
                    if seen not in answer:
                        answer.append(seen)

        return len(answer)

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        ptr1 = head
        a = []
        if ptr1 == None or ptr1.next == None:
            return False
        while ptr1 != None:
            if ptr1 not in a:
                a.append(ptr1)
                ptr1 = ptr1.next
            if ptr1 in a:
                return True
        return False

# Сложность O(n) - постоянная. Создаём список который будет хранить подсписок исходного списка. Если в цикле мы дойдём до момента когда мы встретим подсписок, который уже есть в списке a - то значит попали в цикл, иначе, если дошли до None - в исходном односвязном списке нет циклов.
